{% extends 'base.twig' %}
{% import "macros.twig" as macros %}

{% set page_title = 'Help - Build and Deployment Scripting Guide' %}

{% block breadcrumb_links %}
    <li><a href="{{ uriFor('help') }}">Help and FAQ</a></li>
{% endblock %}

{% block content %}
    <ul class="list--bullet">
        <li><a href="#stages">Build and Release Stages</a></li>
        <li><a href="#configuration-file">.hal9000.yml configuration file</a></li>
        <li>
            <h5>Scripting Environments</h5>
            <ul class="list--bullet">
                <li><a href="#build-environment">Build Environment</a></li>
                <li><a href="#deploy-environment">Deployment Environment</a></li>
            </ul>
        </li>
        <li>
            <h5>Features</h5>
            <ul class="list--bullet">
                <li><a href="#docker">Docker</a></li>
                <li><a href="#env-configuration">Environment Variables and Configuration</a></li>
                <li><a href="#encrypted-configuration">Encrypted Properties</a></li>
                <li><a href="#before-after-deploy">Running commands before or after a deployment</a></li>
            </ul>
        </li>
    </ul>

    <h2 id="stages">Build and Release Stages</h2>
    <p>An application can specify a command to run in each of these separate stages in the deployment process:</p>
    <ul class="list--bullet">
        <li>
            <h6>Build Stage</h6>
            <ol class="list--numbered">
                <li>Build</li>
            </ol>
        </li>
        <li>
            <h6>Release Stage</h6>
            <ol class="list--numbered">
                <li>Build Transform</li>
                <li>Before Deploy</li>
                <li>Pre-push (<code>rsync</code> only. Runs on target server)</li>
                <li>Deploy</li>
                <li>Post-push (<code>rsync</code> only. Runs on target server)</li>
                <li>After Deploy</li>
            </ol>
        </li>
    </ul>

    <p>
        <b>After Deploy</b> step runs even if the deployment fails. This allows you to run different commands
        depending on if a deployment passed or failed.
    </p>

    <p>
        You can only define the <b>Deploy</b> step if <b>script-based deployments</b> are used. If using a built-in deployment type such as <b>rsync</b>
        or <b>elastic beanstalk</b>, Hal will take care of the deployment step for you.
    </p>

    <p>
        These commands must be executable in a standard <b>shell environment</b>.
        It is common for applications to create a special bin within the project folder, but any command will do.
    </p>

    <p>
        <b>RSync deployments</b> have two additional steps: <code>pre-push</code> and <code>post-push</code>.
        These steps run before and after the deployment <b>on the target server</b> which enables stopping or starting servers
        before before and after a deployment.
    </p>

    Examples:
    <ul class="list--bullet">
        <li><code>env</code></li>
        <li><code>npm install</code></li>
        <li><code>bin/composer install --no-dev</code></li>
        <li><code>bin/deploy</code></li>
        <li><code>cmd /c build.cmd</code></li>
        <li><code>bin/compile_my_application --environment $HAL_ENVIRONMENT</code></li>
    </ul>

    <p>
        All commands are executed from the directory of the application.
        All command are exectued from isolated docker containers on build servers.
        Hal will consider any command with a non-zero exit code a failure.
    </p>

    <h5 class="mbn"><b>A note on post-deploy command failures</b></h5>
    <p>
        The <b>After Deploy</b> step will <b>always</b> run, even if the deployment is a failure.
    </p>

    {{ macros.alert('warning', 'The exit code of the command <b>MUST</b> be 0.') }}

    <h2 id="configuration-file">Hal configuration file</h2>
    <p>
        Several deployment options may be configured by committing a <code>.hal9000.yml</code>
        to the base directory of your project codebase.
    </p>

    {{ block('configuration_explanation') }}

    <h4>Here is an example with default values:</h4>
    {{ block('configuration_file') }}

    <h2 id="build-environment">Build Environment</h2>
    <p>During the build process, The following environment variables are available to application build scripts:</p>
    {{ block('build_vars') }}

    <p>
        These variables will be available as standard environment variables in a shell scripting environment.
        If using a PHP-based script, they are available in the <b>$_SERVER</b> superglobal.
    </p>

    <h2 id="deploy-environment">Deployment Scripting Environment</h2>
    <p>During the deployment process, The following environment variables are available to application pre-deploy and post-deploy scripts:</p>
    {{ block('push_vars') }}

    <p>Upon deployment a yaml file in the following format will be written to the application directory:</p>
    {{ block('push_file') }}

    <h2 id="docker">Docker</h2>
    {{ block('docker_info') }}

    <h2 id="env-configuration">Environment Variables and Configuration</h2>
    <p>
        Configuration values can be passed to your app and scripts in two ways:
        <ul class="list--bullet">
            <li>hal configuration file (non-secrets)</li>
            <li><a href="#encrypted-configuration">encrypted configuration</a> (secrets and sensitive values)</li>
        </ul>
    </p>
    <p>
        Both methods allow you to specify <b>global configuration</b> shared by all environments and <b>environment-specific</b> values
        only defined in specific environments.
    </p>
    <p>See the following <code>.hal9000.yml</code> example file for how environment variables are used are used.</p>
    {{ block('env_configuration_file') }}

    <h2 id="encrypted-configuration">Encrypted Configuration</h2>

    <p>
        From the frontend Hal interface, administrators and project leads can add encrypted properties. Encrypted Properties
        are sensitive information such as passwords or API keys. During <b>build</b> and <b>build_transform</b>,
        encrypted properties will be decrypted and set as environment variables.
    </p>
    <p>
        Decrypted environment variables will be prefixed with <code>ENCRYPTED_</code>. If a value such as "MY_SECRET_PASS" is stored,
        it will be available to build scripts at the <code>ENCRYPTED_MY_SECRET_PASS</code> environment variable.
    </p>

    {{ macros.alert('warning', 'Never dump environment variables to STDOUT!', 'Do not run commands such as "printenv" or "set". This can expose sensitive information which may be viewed by unauthorized users.') }}

    <p>
        If your application requires specific properties to run, it is a good idea to check if they are set and fail your build if they are empty or missing.
        <br><br>
        Hal will automatically fail builds when decryption fails, but this does not protect against required configuration being deleted from the encrypted property store.
    </p>

    <h2 id="before-after-deploy">Running commands before or after a deployment</h2>
    <p>
        It is possible to run commands in a docker build environment before or after a deployment. This allows you to
        run specific commands such as notifications only in the event that a deployment succeeeds (or fails).
    </p>
    <p>Check out the following example hal configuration file:</p>
    {{ block('after_deploy_file') }}


{% endblock %}

{% block build_vars %}
    <table>
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <b>master</b>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <b>staging</b> or <b>prod</b>)</td>
            </tr>
            <tr>
                <td>HAL_APP</td>
                <td>Hal name for the building application</td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_vars %}
    <table>
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <b>master</b>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <b>staging</b> or <b>prod</b>)</td>
            </tr>
            <tr>
                <td>HAL_APP</td>
                <td>Hal identifier for the deploying application</td>
            </tr>
            <tr>
                <td>HAL_METHOD</td>
                <td>Deployment method (such as <b>rsync</b>, <b>script</b>, <b>cd</b>, <b>s3</b>, or <b>eb</b>)</td>
            </tr>
            <tr>
                <td>HAL_CONTEXT</td>
                <td>Extra context data for scripts</td>
            </tr>
            <tr>
                <td>HAL_HOSTNAME</td>
                <td>
                    Hostname of server
                    <br><small>(<b>rsync</b> deployments only)</small>
                </td>
            </tr>
            <tr>
                <td>HAL_PATH</td>
                <td>
                    Full path of deployment directory on server
                    <br><small>(<b>rsync</b> deployments only)</small>
                </td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_file %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.push.yml

id: ''         # Build ID
source: ''     # Full url of github repository
env: ''        # Environment of the build
user: ''       # Username of user that triggered the push
reference: ''  # Git Reference
commit: ''     # Git commit SHA
date: ''       # ISO 8601 date
</pre>
{% endblock %}

{% block configuration_explanation %}
    <table>
        <thead>
            <tr>
                <td>Property</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>system</td>
                <td>Build system. <b>docker:$IMAGE_NAME</b>.</td>
            </tr>
            <tr>
                <td>dist</td>
                <td>Relative path to directory to archive. This path must exist and be within the project directory. If a <b>dist</b> or compiled binary is built as part of your build process, you can make sure to only archive compiled and deployable files.</td>
            </tr>
            <tr>
                <td>exclude</td>
                <td>
                    Directories or files to exclude while pushing deployment to target server. If you have caches or assets that must not be removed by Hal, enter them here.
                    <br><small>(<b>rsync</b> deployments only)</small>
                </td>
            </tr>
            <tr>
                <td>build</td>
                <td>A command or list of commands used to build a project. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>build_transform</td>
                <td>A command or list of commands used to transform a build per-server or per-environment during the push process. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>pre_push</td>
                <td>
                    A command or list of commands used to prepare target server for deployment. Up to 10 may be entered.
                    <br><small>(<b>rsync</b> deployments only)</small>
                </td>
            </tr>
            <tr>
                <td>deploy</td>
                <td>
                    A command or list of commands used to deploy an application. Up to 10 may be entered.
                    <br><small>(<b>script</b> deployments only)</small>
                </td>
            </tr>
            <tr>
                <td>post_push</td>
                <td>
                    A command or list of commands used to clean up target server after deployment. Up to 10 may be entered.
                    <br><small>(<b>rsync</b> deployments only)</small>
                </td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block configuration_file %}
<pre>
# filename: APPLICATION_ROOT/.hal9000.yml
# Build container.
system: docker:base_centos7

# Relative file path to use for build artifact after build stage.
dist: '.'

# Shell commands to run during build stage
build: []

# Shell commands to run during deployment stage
build_transform: []
before_deploy: []
deploy: []
after_deploy: []

# List of directories or files to exclude while pushing to server (rsync-only)
exclude:
    - 'config/database.ini'
    - 'data/'

# Shell commands to run before deployment process, on target server (rsync-only)
pre_push: []

# Shell commands to run after deployment process, on target server (rsync-only)
post_push: []
</pre>
{% endblock %}

{% block docker_info %}
    <p>
        Each build is run in a new, isolated docker container.
        The <b>entire</b> build container is at your disposal. You may install anything, anywhere.
    </p>
    <p>
        A custom docker container can be specified with <code>system</code> in your <code>.hal9000.yml</code>.
    </p>

    <h4>Examples:</h4>
    <ul>
        <li><code>system: 'docker:node6.2'</code></li>
        <li><code>system: 'docker:php7.0'</code></li>
        <li><code>system: 'docker:erlang19.0'</code></li>
    </ul>

    <p>
        If no docker container is specified, the <b>legacy</b> container is used, which has a frozen configuration with older versions of PHP, Node, and Ruby.
    </p>

    <p>
        We recommend switching to a different container as soon as possible.
        If no current container fits your application needs, contact an Administrator.
        They can help you find a container that fits your needs or write a custom dockerfile for your usage.<br><br>

        Please see <a href="http://git/skluck/docker-images">skluck/docker-images</a>{{ macros.icon('github') }} for currently available containers.
    </p>

    <p>
        <b>Please Note:</b><br>
        No data is cached between builds. This feature will be introduced in a later version.<br><br>

        This means no NPM, Composer, Ruby, etc packages or dependencies will be cached. As a result builds may be slightly slower than before.<br><br>

        You can mitigate this additional time by building a custom docker image with your package manager dependencies <b>pre-installed</b>.
    </p>
{% endblock %}

{% block env_configuration_file %}
<pre>
# filename: APPLICATION_ROOT/.hal9000.yml

env:
    global:
        DERP_HERP: 'TESTING'
    staging:
        APP_BASE_URL: 'https://apptest.example.com'
        DEBUG_MODE_ON: true
    prod:
        APP_BASE_URL: 'https://app.example.com'
        DEBUG_MODE_ON: false

build:
    - './compile-app.sh $APP_BASE_URL'
    - './other-command'

deploy:
    - './deploy-release.sh'
</pre>
{% endblock %}

{% block after_deploy_file %}
<pre>
after_deploy:
    - 'if [ "$HAL_DEPLOY_STATUS" == "SUCCESS" ] ; then ./notify.sh ; fi'
    - 'if [ "$HAL_DEPLOY_STATUS" == "FAILURE" ] ; then echo "UH OH" ; fi'
</pre>
{% endblock %}
