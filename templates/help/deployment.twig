{% extends 'base.html.twig' %}
{% import "_partial/macros.twig" as macros %}

{% set page_title = 'Help : Deployment' %}

{% block content %}

    <div class="nav--page">
        <h1>Help - <strong>Deployment Guide for engineers</strong></h1>

        <p class="nav--page__back">
            <a class="btn btn--small btn--back" href="{{ urlFor('help') }}">Back to Help</a>
        </p>
    </div>

    <ul class="list--bullet">
        <li><a href="#shell-commands">Commands</a></li>
        <li><a href="#configuration-file">.hal9000.yml configuration file</a></li>
        <li><a href="#build-environment">Build scripting environment</a></li>
        <li><a href="#push-environment">Push scripting environment</a></li>
        <li><a href="#docker">Docker</a></li>
        <li><a href="#package-managers">Package Managers</a></li>
        <li><a href="#encrypted-configuration">Encrypted Properties</a></li>
    </ul>

    <h2 id="shell-commands">Commands</h2>
    <p>An application can specify a command to run in each of these separate steps in the deployment process:</p>
    <ul class="list--bullet">
        <li><strong>Build</strong> (Runs on build server)</li>
        <li><strong>Pre-push Build Transform</strong> (Runs on build server)</li>
        <li><strong>Pre-push</strong> (Runs on deployment web server)</li>
        <li><strong>Post-push</strong> (Runs on deployment web server)</li>
    </ul>

    <p>
        These commands must be executable in a standard <strong>SSH shell environment</strong>.
        It is common for applications to create a special bin within the project folder, but any command will do.<br><br>
        Commands designed to run on the target server (pre-push or post-push) are skipped for Code Deploy and Elastic Beanstalk deployments
    </p>

    Examples:
    <ul class="list--bullet">
        <li><code>env</code></li>
        <li><code>npm install</code></li>
        <li><code>bin/composer install --no-dev</code></li>
        <li><code>bin/deploy</code></li>
        <li><code>cmd /c build.cmd</code></li>
        <li><code>bin/compile_my_application --environment $HAL_ENVIRONMENT</code></li>
    </ul>

    <p>
        All commands are executed from the directory of the application.
    </p>
    <p>
       Build command are executed from isolated docker containers on the build server. Push commands are executed on the server the application code is being pushed to.
       Hal will consider any command with a non-zero exit code as a failure.
    </p>

    {{ macros.alert('warning', 'The exit code of the command <strong>MUST</strong> be 0.') }}

    <h2 id="configuration-file">Hal configuration file</h2>
    <p>
        Several deployment options may be configured by committing a <code>.hal9000.yml</code> to the base directory of your project codebase.
    </p>

    {{ block('configuration_explanation') }}

    <h4>Here is an example with default values:</h4>
    {{ block('configuration_file') }}

    <p>
        For applications already using Hal, build and push commands in the database will be used for <strong>old builds</strong>, and when no configuration file has been committed.
        When present, commands found in the configuration file will be used instead of build and push commands stored in the Hal database.
    </p>

    <h2 id="build-environment">Build Scripting Environment</h2>
    <p>During the build process, The following environment variables are available to application build scripts:</p>
    {{ block('build_vars') }}

    <p>
        These variables will be available as standard environment variables in a shell scripting environment.
        If using a PHP-based script, they are available in the <strong>$_SERVER</strong> superglobal.
    </p>

    <h2 id="push-environment">Push Scripting Environment</h2>
    <p>During the push process, The following environment variables are available to application pre-push and post-push scripts:</p>
    {{ block('push_vars') }}

    <p>Upon deployment a yaml file in the following format will be written to the application directory:</p>
    {{ block('push_file') }}

    <h5 class="mbn"><strong>A note on post-push command failures</strong></h5>
    <p>
        Post-push commands run <strong>after</strong> the application code is synced to the target server. For this
        reason, returning an error state will not stop the push process. If an error occurs, you will need to start
        a new push and overwrite the failed one.
    </p>

    <h2 id="docker">Docker</h2>
    {{ block('docker_info') }}

    <h2 id="package-managers">Package Managers - Recommended installation commands</h2>
    {{ block('pm_commands') }}

    <h2 id="encrypted-configuration">Encrypted Properties</h2>

    <p>
        From the frontend Hal interface, administrators and project leads can add encrypted properties. Encrypted Properties
        are sensitive information such as passwords or API keys. During <strong>build</strong> and <strong>build_transform</strong>,
        encrypted properties will be decrypted and set as environment variables.
    </p>
    <p>
        Decrypted environment variables will be prefixed with <code>ENCRYPTED_</code>. If a value such as "MY_SECRET_PASS" is stored,
        it will be available to build scripts at the <code>ENCRYPTED_MY_SECRET_PASS</code> environment variable.
    </p>

    {{ macros.alert('warning', 'Never dump environment variables to STDOUT!', 'Do not run commands such as "printenv" or "set". This can expose sensitive information which may be viewed by unauthorized users.') }}

    <p>
        If your application requires specific properties to run, it is a good idea to check if they are set and fail your build if they are empty or missing.<br><br>
        Hal will automatically fail builds when decryption fails, but this does not protect against required configuration being deleted from the encrypted property store.
    </p>

{% endblock %}

{% block build_vars %}
    <table class="table--spacing-medium">
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <strong>master</strong>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <strong>test</strong>, <strong>beta</strong>, <strong>prod</strong>)</td>
            </tr>
            <tr>
                <td>HAL_REPO</td>
                <td>Hal name for the deployed application</td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_vars %}
    <table class="table--spacing-medium">
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <strong>master</strong>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <strong>test</strong>, <strong>beta</strong>, <strong>prod</strong>)</td>
            </tr>
            <tr>
                <td>HAL_REPO</td>
                <td>Hal identifier for the deployed application</td>
            </tr>
            <tr>
                <td>HAL_HOSTNAME</td>
                <td>Hostname of server (<strong>rsync</strong> deployments only)</td>
            </tr>
            <tr>
                <td>HAL_PATH</td>
                <td>Full path of deployment directory on server (<strong>rsync</strong> deployments only)</td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_file %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.push.yml

id: ''         # Build ID
source: ''     # Full url of github repository
env: ''        # Environment of the build
user: ''       # Username of user that triggered the push
reference: ''  # Git Reference
commit: ''     # Git commit SHA
date: ''       # ISO 8601 date
</pre>
{% endblock %}

{% block configuration_explanation %}
    <table class="table--spacing-medium">
        <thead>
            <tr>
                <td>Property</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>system</td>
                <td>Build system. <strong>docker:$IMAGE_NAME</strong> or <strong>windows</strong>.</td>
            </tr>
            <tr>
                <td>dist</td>
                <td>Relative path to directory to archive. This path must exist and be within the project directory. If a <strong>dist</strong> or compiled binary is built as part of your build process, you can make sure to only archive compiled and deployable files.</td>
            </tr>
            <tr>
                <td>exclude</td>
                <td>Directories or files to exclude while pushing deployment to target server. If you have caches or assets that must not be removed by Hal, enter them here.</td>
            </tr>
            <tr>
                <td>build</td>
                <td>A command or list of commands used to build a project. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>build_transform</td>
                <td>A command or list of commands used to transform a build per-server or per-environment during the push process. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>pre_push</td>
                <td>A command or list of commands used to prepare target server for push. Up to 10 may be entered. <strong>Skipped for CD and EB deployments.</strong></td>
            </tr>
            <tr>
                <td>post_push</td>
                <td>A command or list of commands used to clean up target server after push. Up to 10 may be entered. <strong>Skipped for CD and EB deployments.</strong></td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block configuration_file %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.yml

system: docker:legacy        # Build container.
dist: .                      # Relative file path to use for build archive.
exclude:                     # Array of directories or files to exclude while pushing to server
    - config/database.ini
    - data/

build: []                    # Shell commands to run during build process, on build server
build_transform: []          # Shell commands to run before push process, on build server
pre_push: []                 # Shell commands to run before push process, on target deployment server
post_push: []                # Shell commands to run after push process, on target deployment server
</pre>
{% endblock %}

{% block docker_info %}
    <p>
        Each build is run in a new, isolated docker container.The <strong>entire</strong> build container is at your disposal. You may install anything, anywhere.
    </p>
    <p>
        A custom docker container can be specified with <code>system</code> in your <code>.hal9000.yml</code>.
    </p>

    <h4>Examples:</h4>
    <ul class="list--bare">
        <li><code>system: 'docker:legacy'</code></li>
        <li><code>system: 'docker:php5.5'</code></li>
        <li><code>system: 'docker:erlang17.5'</code></li>
    </ul>

    <p>
        If no docker container is specified, the <strong>legacy</strong> container is used, which shares a similiar configuration to the old push servers.
    </p>

    <p>
        We recommend switching to a different container as soon as possible. If no current container fits your application needs, contact a member of the Web Core team.
        We can help you find a container that fits your needs or write a custom dockerfile for your usage.<br><br>

        Please see <a href="http://git/skluck/docker-images">skluck/docker-images</a>{{ macros.icon('github') }} for currently available containers.
    </p>

    <p>
        <strong>Please Note:</strong><br>
        No data is cached between builds. This feature will be introduced in a later version.<br><br>

        This means no NPM, Composer, Ruby, etc packages or dependencies will be cached. As a result builds may be slightly slower than before.<br><br>

        You can mitigate this additional time by building a custom docker image with your package manager dependencies <strong>pre-installed</strong>.
    </p>
{% endblock %}

{% block pm_commands %}
    <table class="table--spacing-medium">
        <thead>
            <tr>
                <td>Manager</td>
                <td>Command</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Composer</td>
                <td><code>composer install --no-dev --prefer-dist --ansi --no-interaction --optimize-autoloader</code></td>
            </tr>
            <tr>
                <td>NPM</td>
                <td><code>npm install --production</code></td>
            </tr>
            <tr>
                <td>Bundler</td>
                <td>
                    <code>
                        gem install bundler<br>
                        bundle install --frozen
                    </code>
                </td>
            </tr>
        </tbody>
    </table>
{% endblock %}
