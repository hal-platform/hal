{% extends 'base.twig' %}
{% import "_partial/macros.twig" as macros %}

{% set page_title = 'Help : Application Setup' %}

{% set kmContact = '<a href="mailto:KeymastersAppEngineers@quickenloans.com">KeymastersAppEngineers@quickenloans.com</a>' %}
{% set wcContact = '<a href="mailto:ITTeamWebCore@quickenloans.com">ITTeamWebCore@quickenloans.com</a>' %}

{% block content %}

    <div class="nav--page">
        <h1>Help - Application Setup Guide</h1>

        <p class="nav--page__back">
            <a class="btn btn--small btn--back" href="{{ uriFor('help') }}">Back to Help</a>
        </p>
    </div>

    <p>
        Once a project has been added to Hal, deployment targets must be added and assigned to start deployments.
        This guide will help you step through all the requirements for setting up an application for deployments through Hal.
    </p>

    <p>
        <b>Please note:</b><br>
        Most of this configuration is handled by server administrators from <b>UNIX team</b>. Do not expect this setup to occur quickly.
    </p>

    <ul class="list--bare">
        <li class="trailer">
            <ul class="list--bullet">
                <li><a href="#onprem-rsync">On-premise - Rsync</a></li>
                <li><a href="#aws-elastic-beanstalk">AWS - Elastic Beanstalk</a></li>
                <li><a href="#aws-codedeploy">AWS - CodeDeploy</a></li>
                <li><a href="#aws-s3">AWS - S3</a></li>
                <li><a href="#any-script">Any - Script-based</a></li>
            </ul>
        </li>
    </ul>

    <h3 id="onprem-rsync">{{ macros.status_icon('How do I set up On-premise servers for Hal?') }}</h3>
    {{ block('setup_rsync') }}

    <h3 id="any-script">{{ macros.status_icon('How do I configure my application for deploying with a script?') }}</h3>
    {{ block('setup_script') }}

    <h3 id="aws-elastic-beanstalk">{{ macros.status_icon('How I configure my application for AWS Elastic Beanstalk?') }}</h3>
    {{ block('setup_elastic') }}

    <h3 id="aws-codedeploy">{{ macros.status_icon('How I configure my application for AWS CodeDeploy?') }}</h3>
    {{ block('setup_codedeploy') }}

    <h3 id="aws-s3">{{ macros.status_icon('How do I configure my application for AWS S3?') }}</h3>
    {{ block('setup_s3') }}

{% endblock %}

{% block setup_rsync %}

    <ol class="list--bullet">
        <li>
            <strong>Request servers from UNIX team.</strong>
            <p>
                Once provisioned to your requirements, you should get a list of servers from unix.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <strong>What environments and servers will your application be deployed to?</strong>
            <p>
                Examples: <code>test1www1</code>, <code>dev1iweb</code>, <code>prod1srvwww1</code>
            </p>
        </li>
        <li>
            <strong>Where on those servers will your application be hosted?</strong>
            <p>
                This should be the full path to the directory that code is pushed to.
                <br>Example: <code>/var/www/application</code>
            </p>
        </li>
        <li>
            <strong>Determine the URL for each environment or server.</strong>
            <p>
                When a server is added for your application to deploy to, you should also add the URL where the service or site is available from.
                This will helps testers and administrators find your application servers.
                <br>Examples: <code>http://test.application.com</code>, <code>http://test1w1.application.com</code>
            </p>
        </li>
        <li>
            <strong>Make sure permissions are correct on each server.</strong>
            <p>
                For Hal to be able to push code to these servers, the user <code>codexfer</code> must have passwordless access to each server.
                In addition, the directory to be deployed to must be owned by <code>codexfer</code> and typically belong to the <code>apache</code> or <code>nginx</code> groups.
            </p>
        </li>
    </ol>

    <small>
        Once this process is finished you should have the following information:
        <b>Server names</b>,
        <b>deployment path</b>,
        and <b>deployment URLs</b>.

        Contact the Key Masters at {{ kmContact|raw }} or Web Core at {{ wcContact|raw }} to request that the deployment information be added to Hal.
    </small>

{% endblock %}

{% block setup_script %}

    <p>
        Instead of using an existing deployment type within Hal, applications can specify <b>shell scripts</b> to be run during the deployments.
        This allows applications complete control over their deployment process.
    </p>

    <p>
        Commands are specified in the <code>.hal9000.yml</code> configuration file with the <code>deploy</code> property.
    </p>

    <p>See the following example where a server is shutdown, deployed to, and restarted as a part of an application-defined script-based deployment:</p>

    {{ block('script_example') }}

    <p>
        Data can also be passed to these scripts using <b>Script Context</b>.
        Script context is defined on the deployment target within Hal.
        This is simply any data you would like to pass to your scripts.
    </p>
    <p>
        <b>Do not use this to store secrets.</b> This data is not encrypted.
    </p>

    <p>
        Script context is accessible from the <code>HAL_CONTEXT</code> environment variable and can be accessed from with your scripts or as a shell argument.
    </p>

    {{ block('script_example_context') }}

    <p>
        The same variables and environment available for builds is available during the deploy process.
        Check out the <a href="{{ uriFor('help.deployment') }}">Deployment scripting guide</a> for more details.
    </p>

{% endblock %}

{% block setup_elastic %}

    <p>
        With Elastic Beanstalk, you can quickly deploy and manage applications in the AWS cloud without worrying about the infrastructure that runs those applications.
    </p>
    <p>
        AWS Elastic Beanstalk reduces management complexity without restricting choice or control.
        You simply upload your application, and Elastic Beanstalk automatically handles the details of capacity provisioning, load balancing, scaling, and application health monitoring.
    </p>

    <ol class="list--bullet">
        <li>
            <strong>Have unix create an Elastic Beanstalk Application and S3 bucket.</strong>
            <p>
                Versions of your application are uploaded as a zip file to S3. EB then downloads the versions and deploys them.
            </p>
        </li>
        <li>
            <strong>An environment must be created for each deployment target.</strong>
            <p>
                While you may have only one target per traditional environment (test, beta, prod). Elastic Beanstalk supports any number of environments.
                For example, you may use this if you need multiple isolated testing environments in test.
            </p>
        </li>
        <li>
            <strong>Create AWS access token with correct permissions.</strong>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
                <li><code>elasticbeanstalk:DescribeEnvironments</code></li>
                <li><code>elasticbeanstalk:UpdateEnvironment</code></li>
                <li><code>elasticbeanstalk:CreateApplicationVersion</code></li>
                <li><code>elasticbeanstalk:DescribeApplicationVersions</code></li>
            </ul>
            <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
        </li>
        <li>
            <strong>Customize deployments with .ebextensions or env.yaml</strong>
            <p>
                If you need to run commands on the server when code is deployed, such as set permissions, warm caches or other functionality.
            </p>
        </li>
    </ol>

    <h6>Other references:</h6>
    <ul class="list--bare">
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/GettingStarted.Walkthrough.html">Elastic Beanstalk Walkthrough</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html">Advanced environment customization (.bextensions)</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment manifest (env.yaml)</a></li>
    </ul>

    <small>
        Once this process is finished you should have the following information:
        <b>EB Application</b>,
        <b>S3 bucket</b>,
        <b>Environment ID</b>,
        and <b>AWS Access Token</b>.

        Contact the Key Masters at {{ kmContact|raw }} or Web Core at {{ wcContact|raw }} to request that the deployment information be added to Hal.
    </small>

{% endblock %}

{% block setup_codedeploy %}

    <p>
        AWS CodeDeploy coordinates application deployments to Amazon EC2 instances, on-premises instances, or both.
    </p>
    <p>
        AWS CodeDeploy works with various configuration management systems, continuous integration and deployment systems, and source control systems.
        It is similar to Elastic Beanstalk, but provides more control over server instances and technology.
    </p>

    <ol class="list--bullet">
        <li>
            <strong>Request servers from UNIX team.</strong>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <strong>CodeDeploy agent must be installed on all servers.</strong>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <strong>Have unix create a CodeDeploy Application and S3 bucket.</strong>
            <p>
                Your application is compiled into a tarball and uploaded to S3. The CodeDeploy agents then pull the archive from the S3 bucket and deploy it to the server.
            </p>
        </li>

        <li>
            <strong>CodeDeploy agent must be installed on all servers.</strong>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>

        <li>
            <strong>Create AWS access token with correct permissions.</strong>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
                <li><code>codedeploy:CreateDeployment</code></li>
                <li><code>codedeploy:CreateDeployment</code></li>
                <li><code>codedeploy:ListDeployments</code></li>
            </ul>

            <p>
                <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
            </p>
        </li>

        <li>
            <strong>Configure deployments with appspec.yml</strong>
            <p class="mtm mbn">
                You must configure your deployment procedure with an appspec file.
                This informs the agents where to put your code.
            </p>
            {{ block('setup_codedeploy_appspec') }}

            <p class="mtm mbn">If you need to customize permissions, you can add a block for that:</p>
            {{ block('setup_codedeploy_appspec_perm') }}

            <p class="mtm mbn">If you need to run a command on the server, this is also supported:</p>
            {{ block('setup_codedeploy_appspec_command') }}
        </li>
    </ol>

    <h6>Other references:</h6>
    <ul class="list--bare">
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html">What is AWS CodeDeploy?</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AWS CodeDeploy AppSpec File Reference</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-add-appspec-file.html">Add an AppSpec File to a Revision for AWS CodeDeploy</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-run-agent-install.html">Install or Reinstall the AWS CodeDeploy Agent</a></li>
    </ul>

    <small>
        Once this process is finished you should have the following information:
        <b>CD Application</b>,
        <b>S3 bucket</b>,
        <b>Deployment Group</b>,
        <b>Deployment Configuration</b>,
        and <b>AWS Access Token</b>.

        Contact the Key Masters at {{ kmContact|raw }} or Web Core at {{ wcContact|raw }} to request that the deployment information be added to Hal.
    </small>

{% endblock %}

{% block setup_s3 %}
    <p>
        S3 deployments are useful for uploading code used by other processes or applications.
        All deployments are compressed into a tarball and uploaded to a bucket.
    </p>
    <p>If you have need to upload to S3 <b>without compressing into an archive first</b> for example for a static site or assets, please contact us. We can add this feature if there is a need.</p>

    <ol class="list--bullet">
        <li>
            <strong>Have unix create an S3 bucket.</strong>
            <p>Your application will be compressed into a tarball and uploaded to the bucket, with the filename of your choice.</p>
        </li>
        <li>
            <strong>Create AWS access token with correct permissions.</strong>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
            </ul>

            <p>
                <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
            </p>
        </li>
    </ol>

    <small>
        Once this process is finished you should have the following information:
        <b>S3 bucket</b>,
        and <b>AWS Access Token</b>.

        Contact the Key Masters at {{ kmContact|raw }} or Web Core at {{ wcContact|raw }} to request that the deployment information be added to Hal.
    </small>

{% endblock %}

{% block setup_codedeploy_appspec %}
    {% spaceless %}
        <pre class="small-code">version: 0.0
os: linux
files:
    - source: /
      destination: /var/www/testapplication</pre>
    {% endspaceless %}
{% endblock %}

{% block setup_codedeploy_appspec_perm %}
    {% spaceless %}
        <pre class="small-code">permissions:
  - object: /var/www/testapplication
    pattern: "**"
    owner: ux-ecsvc
    group: ux-ecsvc
    type:
      - file
      - directory</pre>
    {% endspaceless %}
{% endblock %}

{% block setup_codedeploy_appspec_command %}
    {% spaceless %}
        <pre class="small-code">hooks:
  Install:
    - location: /var/www/application/bin/myscript.sh
      timeout: 30 (timeout in seconds, optional)
      runas: user_to_run_command_as (optional)</pre>
    {% endspaceless %}
{% endblock %}

{% block script_example %}
    <pre class="small-code">
# filename: APPLICATION_ROOT/.hal9000.yml
system: docker:node6.2

build:
    - 'npm install --production'
    - 'npm run build'

deploy:
    - 'ssh deployuser@myserver /opt/testapp/shutdown-server.sh'
    - 'rsync . deployuser@myserver:/var/testapp'
    - 'ssh deployuser@myserver /opt/testapp/restart-server.sh'
</pre>
{% endblock %}

{% block script_example_context %}
    <pre class="small-code">
system: docker:node6.2
build:
    - 'npm install --production'
deploy:
    - 'run-script.sh ${HAL_CONTEXT}'
</pre>
{% endblock %}

