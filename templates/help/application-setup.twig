{% extends 'base.twig' %}
{% import "macros.twig" as macros %}

{% set page_title = 'Help : Application Setup' %}

{% set halContact = '<a href="mailto:' ~ hal_administrators_email ~ '">' ~ hal_administrators_email ~ '</a>' %}

{% block content %}

    <div class="nav--page">
        <h1>Help - Application Setup Guide</h1>

        <p class="nav--page__back">
            <a class="btn btn--small btn--back" href="{{ uriFor('help') }}">Back to Help</a>
        </p>
    </div>

    <p>
        Once a project has been added to Hal, deployment targets must be added and assigned to start deployments.
        This guide will help you step through all the requirements for setting up an application for deployments through Hal.
    </p>

    <p>
        <b>Please note:</b><br>
        Most of this configuration is handled by server administrators from your Platform Engineering team. Do not expect this setup to occur quickly.
    </p>

    <ul class="list--bare">
        <li class="trailer">
            <ul class="list--bullet">
                <li><a href="#onprem-rsync">On-premise - Rsync</a></li>
                <li><a href="#aws-elastic-beanstalk">AWS - Elastic Beanstalk</a></li>
                <li><a href="#aws-codedeploy">AWS - CodeDeploy</a></li>
                <li><a href="#aws-s3">AWS - S3</a></li>
                <li><a href="#any-script">Any - Script-based</a></li>
            </ul>
        </li>
    </ul>

    <h3 id="onprem-rsync">{{ macros.status_icon('How do I set up On-premise servers for Hal?') }}</h3>
    {{ block('setup_rsync') }}

    <h3 id="any-script">{{ macros.status_icon('How do I configure my application for deploying with a script?') }}</h3>
    {{ block('setup_script') }}

    <h3 id="aws-elastic-beanstalk">{{ macros.status_icon('How I configure my application for AWS Elastic Beanstalk?') }}</h3>
    {{ block('setup_elastic') }}

    <h3 id="aws-codedeploy">{{ macros.status_icon('How I configure my application for AWS CodeDeploy?') }}</h3>
    {{ block('setup_codedeploy') }}

    <h3 id="aws-s3">{{ macros.status_icon('How do I configure my application for AWS S3?') }}</h3>
    {{ block('setup_s3') }}

{% endblock %}

{% block do_it_for_me %}
    <p>
        Contact the Hal administrators at {{ halContact|raw }} to request that the deployment information be added to Hal.
    </p>
{% endblock %}

{% block setup_rsync %}

    <ol class="list--bullet">
        <li>
            <b>Request servers from your Platform Engineering team.</b>
            <p>
                Once provisioned to your requirements, you should get a list of servers from platform engineering.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <b>What environments and servers will your application be deployed to?</b>
            <p>
                Examples: <code>test1www1</code>, <code>dev1iweb</code>, <code>prod1srvwww1</code>
            </p>
        </li>
        <li>
            <b>Where on those servers will your application be hosted?</b>
            <p>
                This should be the full path to the directory that code is pushed to.
                <br>Example: <code>/var/www/application</code>
            </p>
        </li>
        <li>
            <b>Determine the URL for each environment or server.</b>
            <p>
                When a server is added for your application to deploy to, you should also add the URL where the service or site is available from.
                This will helps testers and administrators find your application servers.
                <br>Examples: <code>http://test.application.com</code>, <code>http://test1w1.application.com</code>
            </p>
        </li>
        <li>
            <b>Make sure permissions are correct on each server.</b>
            <p>
                For Hal to be able to push code to these servers, the user <code>codexfer</code> must have passwordless access to each server.
                In addition, the directory to be deployed to must be owned by <code>codexfer</code> and typically belong to the <code>apache</code> or <code>nginx</code> groups.
            </p>
        </li>
    </ol>

    <small>
        Once this process is finished you should have the following information:
        <b>Server names</b>,
        <b>deployment path</b>,
        and <b>deployment URLs</b>.
    </small>

    {{ block('do_it_for_me') }}
{% endblock %}

{% block setup_script %}

    <p>
        Instead of using an existing deployment type within Hal, applications can specify <b>shell scripts</b> to be run during the deployments.
        This allows applications complete control over their deployment process.
    </p>

    <p>
        Commands are specified in the <code>.hal9000.yml</code> configuration file with the <code>deploy</code> property.
    </p>

    <p>See the following example where a server is shutdown, deployed to, and restarted as a part of an application-defined script-based deployment:</p>

    {{ block('script_example') }}

    <p>
        Data can also be passed to these scripts using <b>Script Context</b>.
        Script context is defined on the deployment target within Hal.
        This is simply any data you would like to pass to your scripts.
    </p>
    <p>
        <b>Do not use this to store secrets.</b> This data is not encrypted.
    </p>

    <p>
        Script context is accessible from the <code>HAL_CONTEXT</code> environment variable and can be accessed from with your scripts or as a shell argument.
    </p>

    {{ block('script_example_context') }}

    <p>
        The same variables and environment available for builds is available during the deploy process.
        Check out the <a href="{{ uriFor('help.scripting') }}">Deployment scripting guide</a> for more details.
    </p>

{% endblock %}

{% block setup_elastic %}

    <p>
        With Elastic Beanstalk, you can quickly deploy and manage applications in the AWS cloud without worrying about the infrastructure that runs those applications.
    </p>
    <p>
        AWS Elastic Beanstalk reduces management complexity without restricting choice or control.
        You simply upload your application, and Elastic Beanstalk automatically handles the details of capacity provisioning, load balancing, scaling, and application health monitoring.
    </p>

    <ol class="list--bullet">
        <li>
            <b>Have Platform Engineering create an Elastic Beanstalk Application and S3 bucket.</b>
            <p>
                Versions of your application are uploaded as a zip file to S3. EB then downloads the versions and deploys them.
            </p>
        </li>
        <li>
            <b>An environment must be created for each deployment target.</b>
            <p>
                While you may have only one target per traditional environment (test, beta, prod). Elastic Beanstalk supports any number of environments.
                For example, you may use this if you need multiple isolated testing environments in test.
            </p>
        </li>
        <li>
            <b>Create AWS access token with correct permissions.</b>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
                <li><code>elasticbeanstalk:DescribeEnvironments</code></li>
                <li><code>elasticbeanstalk:UpdateEnvironment</code></li>
                <li><code>elasticbeanstalk:CreateApplicationVersion</code></li>
                <li><code>elasticbeanstalk:DescribeApplicationVersions</code></li>
            </ul>
            <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
        </li>
        <li>
            <b>Customize deployments with .ebextensions or env.yaml</b>
            <p>
                If you need to run commands on the server when code is deployed, such as set permissions, warm caches or other functionality.
            </p>
        </li>
    </ol>

    <h6>Other references:</h6>
    <ul class="list--bare">
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/GettingStarted.Walkthrough.html">Elastic Beanstalk Walkthrough</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/ebextensions.html">Advanced environment customization (.ebextensions)</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/environment-cfg-manifest.html">Environment manifest (env.yaml)</a></li>
    </ul>

    <small>
        Once this process is finished you should have the following information:
        <b>EB Application</b>,
        <b>S3 bucket</b>,
        <b>Environment Name or ID</b>,
        and <b>AWS Access Token</b>.
    </small>

    {{ block('do_it_for_me') }}
{% endblock %}

{% block setup_codedeploy %}

    <p>
        AWS CodeDeploy coordinates application deployments to Amazon EC2 instances, on-premises instances, or both.
    </p>
    <p>
        AWS CodeDeploy works with various configuration management systems, continuous integration and deployment systems, and source control systems.
        It is similar to Elastic Beanstalk, but provides more control over server instances and technology.
    </p>

    <ol class="list--bullet">
        <li>
            <b>Request servers from your Platform Engineering team.</b>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <b>CodeDeploy agent must be installed on all servers.</b>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>
        <li>
            <b>Have Platform Engineering create a CodeDeploy Application and S3 bucket.</b>
            <p>
                Your application is compiled into a tarball and uploaded to S3. The CodeDeploy agents then pull the archive from the S3 bucket and deploy it to the server.
            </p>
        </li>

        <li>
            <b>CodeDeploy agent must be installed on all servers.</b>
            <p>
                All AWS resources are built through Puppet. Complete provisioning instructions must be created to build your servers in AWS.
                <br><small>Please have patience, this process can take a significant amount of time.</small>
            </p>
        </li>

        <li>
            <b>Create AWS access token with correct permissions.</b>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
                <li><code>codedeploy:CreateDeployment</code></li>
                <li><code>codedeploy:CreateDeployment</code></li>
                <li><code>codedeploy:ListDeployments</code></li>
            </ul>

            <p>
                <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
            </p>
        </li>

        <li>
            <b>Configure deployments with appspec.yml</b>
            <p class="mtm mbn">
                You must configure your deployment procedure with an appspec file.
                This informs the agents where to put your code.
            </p>
            {{ block('setup_codedeploy_appspec') }}

            <p class="mtm mbn">If you need to customize permissions, you can add a block for that:</p>
            {{ block('setup_codedeploy_appspec_perm') }}

            <p class="mtm mbn">If you need to run a command on the server, this is also supported:</p>
            {{ block('setup_codedeploy_appspec_command') }}
        </li>
    </ol>

    <h6>Other references:</h6>
    <ul class="list--bare">
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html">What is AWS CodeDeploy?</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/app-spec-ref.html">AWS CodeDeploy AppSpec File Reference</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-add-appspec-file.html">Add an AppSpec File to a Revision for AWS CodeDeploy</a></li>
        <li class="mvn"><a href="http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-run-agent-install.html">Install or Reinstall the AWS CodeDeploy Agent</a></li>
    </ul>

    <small>
        Once this process is finished you should have the following information:
        <b>CD Application</b>,
        <b>S3 bucket</b>,
        <b>Deployment Group</b>,
        <b>Deployment Configuration</b>,
        and <b>AWS Access Token</b>.
    </small>

    {{ block('do_it_for_me') }}
{% endblock %}

{% block setup_s3 %}
    <p>
        S3 deployments are useful for uploading code used by other processes or applications.
        Deployments can either compress a directory into a zip or tarball or upload a single file to a bucket
    </p>

    <ol class="list--bullet">
        <li>
            <strong>Have Platform Engineering create an S3 bucket.</strong>
            <p>
                Your file(s) will be uploaded to the bucket with the filename of your choice. Based on the S3 filename you configure in
                hal you will either upload your entire application or upload specific a file or directory.
            </p>
        </li>
        <li>
            <strong>Choose files to upload</strong>
            <p>
                When setting the S3 filename in hal you can use the follow pattern <code>{src}:{dest}</code> to tell hal
                which files to upload. Where <code>{src}:</code> can be omitted to upload the entire application directory. When
                uploading a directory you can also select the compression type used by suffixing either <code>.tar.gz</code> or <code>.zip</code>
                If neither is given files will be <b>tar/gzipped</b> by default. No compression is given when uploading a single file.
            </p>

            {{ block('s3_file_name_example') }}
            <h5>Examples of changing deployment behavior based on "S3 File"</h5>
            <ul class="list--bullet">
                <li>
                    <p>
                        <code>app.tar.gz</code> Creates a tarball of the entire Application Directory and places it
                        in <code>{s3bucket}/app.tar.gz</code>
                    </p>
                </li>
                <li>
                    <p>
                        <code>lib:s3dir/source.zip</code> (note the <code>:</code>) Creates a zip of the <b>lib</b>
                        directory and places it in <code>{s3bucket}/s3dir/source.zip</code> which will contain only the files
                        <b>source1.code</b> and <b>source2.code</b></small>
                    </p>
                </li>
                <li>
                    <p>
                        <code>assets/image1.jpg:image1.jpg</code> will only upload one file to S3 at
                        <code>{s3bucket}/image1.jpg</code>
                    </p>
                </li>
            </ul>
        </li>
        <li>
            <b>Create AWS access token with correct permissions.</b>
            <p class="mvn">This can be shared between multiple applications, but the token must have the following permissions:</p>
            <ul class="list--bare">
                <li><code>s3:GetObject</code></li>
                <li><code>s3:ListAllMyBuckets</code></li>
                <li><code>s3:ListBucket</code></li>
                <li><code>s3:PutObject</code></li>
            </ul>

            <p>
                <small>Please note: S3 permissions must be for the bucket resource and contents (<code>bucket</code> and <code>bucket/*</code>)</small>
            </p>
        </li>
    </ol>

    <small>
        Once this process is finished you should have the following information:
        <b>S3 bucket</b>,
        and <b>AWS Access Token</b>.
    </small>

    {{ block('do_it_for_me') }}
{% endblock %}

{% block setup_codedeploy_appspec %}
    {% spaceless %}
        <pre>version: 0.0
os: linux
files:
    - source: /
      destination: /var/www/testapplication</pre>
    {% endspaceless %}
{% endblock %}

{% block setup_codedeploy_appspec_perm %}
    {% spaceless %}
        <pre>permissions:
  - object: /var/www/testapplication
    pattern: "**"
    owner: ux-ecsvc
    group: ux-ecsvc
    type:
      - file
      - directory</pre>
    {% endspaceless %}
{% endblock %}

{% block setup_codedeploy_appspec_command %}
    {% spaceless %}
        <pre>hooks:
  Install:
    - location: /var/www/application/bin/myscript.sh
      timeout: 30 (timeout in seconds, optional)
      runas: user_to_run_command_as (optional)</pre>
    {% endspaceless %}
{% endblock %}

{% block script_example %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.yml
system: docker:node6.2

build:
    - 'npm install --production'
    - 'npm run build'

deploy:
    - 'ssh deployuser@myserver /opt/testapp/shutdown-server.sh'
    - 'rsync . deployuser@myserver:/var/testapp'
    - 'ssh deployuser@myserver /opt/testapp/restart-server.sh'
</pre>
{% endblock %}

{% block script_example_context %}
    <pre>
system: docker:node6.2
build:
    - 'npm install --production'
deploy:
    - 'run-script.sh ${HAL_CONTEXT}'
</pre>
{% endblock %}

{% block s3_file_name_example %}
    {% spaceless %}
        <pre>
Application Directory
|_ bin
|___ script1.sh
|___ script2.sh
|_ lib
|___ source1.code
|___ source2.code
|_ assets
|___ image1.jpg
</pre>
    {% endspaceless %}
{% endblock %}

