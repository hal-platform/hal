<?php
/**
 * @copyright (c) 2016 Quicken Loans Inc.
 *
 * For full license information, please view the LICENSE distributed with this source code.
 */

namespace Hal\UI\Validator;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\EntityRepository;
use Hal\Core\Entity\Environment;
use Hal\Core\Entity\Target;
use Hal\Core\Entity\TargetTemplate;
use Hal\Core\Type\TargetEnum;
use Hal\UI\Validator\Targets\TargetValidatorInterface;
use Psr\Http\Message\ServerRequestInterface;

class TargetTemplateValidator
{
    use ValidatorErrorTrait;
    use ValidatorTrait;

    private const REGEX_CHARACTER_RELAXED_WHITESPACE = '\f\n\r\t\v';

    private const ERT_CHARACTERS_RELAXED_WHITESPACE = '%s must not contain tabs or newlines';

    private const ERR_MISSING_ENV = 'Please select an environment.';
    private const ERR_TYPE_REQUIRED = 'Please select a deployment type.';

    /**
     * @var EntityRepository
     */
    private $environmentRepo;

    /**
     * @var array
     */
    private $typeValidators;

    /**
     * @param EntityManagerInterface $em
     */
    public function __construct(EntityManagerInterface $em, array $typeValidators = [])
    {
        $this->environmentRepo = $em->getRepository(Environment::class);

        $this->typeValidators = [];

        foreach ($typeValidators as $type => $validator) {
            $this->addTypeValidator($type, $validator);
        }
    }

    /**
     * @param string $type
     * @param TargetValidatorInterface $validator
     *
     * @return void
     */
    public function addTypeValidator($type, TargetValidatorInterface $validator): void
    {
        $this->typeValidators[$type] = $validator;
    }

    /**
     * @param string $type
     * @param array $parameters
     *
     * @return TargetTemplate|null
     */
    public function isValid(string $type, array $parameters): ?TargetTemplate
    {
        $this->resetErrors();

        $environmentID = $parameters['environment'] ?? '';
        // $credentialID = $parameters['credential'] ?? '';

        $name = trim($parameters['name'] ?? '');
        $context = trim($parameters['script_context'] ?? '');

        $this->validateRequired($name);

        if ($this->hasErrors()) {
            return null;
        }

        $this->validateName($name);
        $this->validateContext($context);

        // stop validation if errors
        if ($this->hasErrors()) {
            return null;
        }

        if (!$environmentID || !$environment = $this->environmentRepo->find($environmentID)) {
            $this->addError(self::ERR_MISSING_ENV, 'environment');
        }

        if ($this->hasErrors()) {
            return null;
        }

        if (!isset($this->typeValidators[$type])) {
            $this->addError(self::ERR_TYPE_REQUIRED, 'deployment_type');
            return null;
        }

        $validator = $this->typeValidators[$type];

        if (!$target = $validator->isValid($parameters)) {
            $this->importErrors($validator->errors());
            return null;
        }

        // stop validation if errors
        if ($this->hasErrors()) {
            return null;
        }

        // Set null on empty fields so they are removed from the parameters
        $context = (strlen($context) > 0) ? $context : null;

        $template = (new TargetTemplate)
            // ->withApplication($application)
            ->withEnvironment($environment)
            ->withType($type)
            ->withName($name)

            ->withParameter(Parameters::TARGET_CONTEXT, $context);

        // Pull the parameters from the targets generated by the type validators
        foreach ($target->parameters() as $param => $value) {
            $template->withParameter($param, $value);
        }

        return $template;
    }

    /**
     * @param TargetTemplate $template
     * @param array $parameters
     *
     * @return TargetTemplate|null
     */
    public function isEditValid(TargetTemplate $template, array $parameters): ?TargetTemplate
    {
        $this->resetErrors();

        $type = $template->type();

        $environmentID = $parameters['environment'] ?? '';
        // $credentialID = $parameters['credential'] ?? '';

        $name = trim($parameters['name'] ?? '');
        $context = trim($parameters['script_context'] ?? '');

        $this->validateRequired($name);

        if ($this->hasErrors()) {
            return null;
        }

        $this->validateName($name);
        $this->validateContext($context);

        // stop validation if errors
        if ($this->hasErrors()) {
            return null;
        }

        if (!isset($this->typeValidators[$type])) {
            $this->addError(self::ERR_TYPE_REQUIRED, 'deployment_type');
            return null;
        }

        $validator = $this->typeValidators[$type];

        if (!$target = $validator->isValid($parameters)) {
            $this->importErrors($validator->errors());
            return null;
        }

        // stop validation if errors
        if ($this->hasErrors()) {
            return null;
        }

        // Set null on empty fields so they are removed from the parameters
        $context = (strlen($context) > 0) ? $context : null;

        $template
            ->withName($name)
            ->withParameters([])
            ->withParameter(Parameters::TARGET_CONTEXT, $context);

        // Pull the parameters from the targets generated by the type validators
        foreach ($target->parameters() as $param => $value) {
            $template->withParameter($param, $value);
        }

        return $template;
    }

    /**
     * @param ServerRequestInterface $request
     * @param string $type
     * @param TargetTemplate|null $template
     *
     * @return array
     */
    public function getTemplateFormData(ServerRequestInterface $request, $type, ?TargetTemplate $template): array
    {
        if (!isset($this->typeValidators[$type])) {
            return [];
        }

        $validator = $this->typeValidators[$type];

        // This is super weird, yes I know
        $target = null;
        if ($template) {
            $target = new Target;
            $target->withParameters($template->parameters());
        }

        return $validator->getFormData($request, $target);
    }

    /**
     * @param string $name
     *
     * @return bool
     */
    private function validateRequired($name)
    {
        if (!$this->validateIsRequired($name) || !$this->validateSanityCheck($name)) {
            $this->addRequiredError('Name', 'name');
        }

        return $this->hasErrors();
    }

    /**
     * @param string $name
     *
     * @return void
     */
    private function validateName($name)
    {
        if (!$this->validateCharacterBlacklist($name, self::REGEX_CHARACTER_RELAXED_WHITESPACE)) {
            $error = sprintf(self::ERT_CHARACTERS_RELAXED_WHITESPACE, 'Name');
            $this->addError($error, 'name');
        }

        if (!$this->validateLength($name, 3, 100)) {
            $this->addLengthError('Name', 3, 100, 'name');
        }
    }

    /**
     * @param string $context
     *
     * @return void
     */
    private function validateContext($context)
    {
        if (strlen($context) === 0) {
            return;
        }

        if (!$this->validateCharacterBlacklist($context, self::REGEX_CHARACTER_RELAXED_WHITESPACE)) {
            $error = sprintf(self::ERT_CHARACTERS_RELAXED_WHITESPACE, 'Script Context');
            $this->addError($error, 'script_context');
        }

        if (!$this->validateLength($context, 3, 100)) {
            $this->addLengthError('Script Context', 3, 100, 'script_context');
        }
    }
}
