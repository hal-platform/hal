# https://circleci.com/docs/2.0/language-php/
# https://circleci.com/docs/2.0/circleci-images/
version: 2

defaults: &defaults
    working_directory: '~/project'

workflows:

  version: 2

  pipeline:
    jobs:
      - fetch_code
      - verify_is_rebased

      - build_backend:
          requires: [ verify_is_rebased, fetch_code ]

      - build_frontend:
          requires: [ verify_is_rebased, fetch_code ]

jobs:
    fetch_code:
        <<: *defaults
        docker: [ { image: 'halplatform/php:latest' } ]

        steps:
            - checkout
            - persist_to_workspace: { root: '.', paths: [ '.' ] }

    verify_is_rebased:
        <<: *defaults
        docker: [ { image: 'halplatform/php:latest' } ]
        steps:
            - run:
                name: 'Prepare Enterprise Setup'
                command: 'curl -sLk https://git/pages/circleci/prepare-environment/prepare.sh | bash -'
            - run:
                name: 'Verify pull request is up to date'
                command: |

                    if [ -z "${CIRCLE_PULL_REQUEST}" ] ; then
                        echo "Not a pull request. Skipping git history comparison check."
                        exit 0
                    fi

                    web_prefix="://git"
                    api_prefix="://git/api/v3/repos"
                    api_compare_url="${CIRCLE_COMPARE_URL/${web_prefix}/${api_prefix}}"

                    # install jq
                    curl -sSL \
                        -o "/usr/bin/jq" \
                        "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" \
                        && chmod +x "/usr/bin/jq"

                    # get comparison status from github
                    curl -sSL \
                        -o "github_compare.json" \
                        "${api_compare_url}"

                    comparison_status=$(jq -r ".status" "github_compare.json")

                    echo "Comparison URL: ${api_compare_url}"
                    echo "Status: ${comparison_status}"
                    echo "Ahead By: $(jq -r ".ahead_by" "github_compare.json")"
                    echo "Behind By: $(jq -r ".behind_by" "github_compare.json")"
                    echo "Total Commits: $(jq -r ".total_commits" "github_compare.json")"

                    if [ "${comparison_status}" != "ahead" ] ; then
                        echo
                        echo "Pull request must be rebased. It is behind HEAD."
                        exit 1
                    fi

                    echo "Pull request is up to date."

    build_backend:
        <<: *defaults
        docker: [ { image: 'halplatform/php:latest' } ]

        steps:
            - attach_workspace: { at: '.' }

            - run:
                name: 'Prepare Enterprise Setup'
                command: 'curl -sLk https://git/pages/circleci/prepare-environment/prepare.sh | bash -'

            - restore_cache:
                keys: [ 'v1-backend-deps-{{ checksum "composer.lock" }}', 'v1-backend-deps-' ]

            - run:
                name: 'Update Composer'
                command: 'composer self-update'

            - run:
                name: 'Install packages'
                command: 'composer --no-interaction --no-progress install'

            - run:
                name: 'List installed packages'
                command: 'composer show'

            - save_cache:
                key: 'v1-backend-deps-{{ checksum "composer.lock" }}'
                paths: [ './vendor' ]

            - run:
                name: 'Run syntax check'
                command: 'vendor/bin/phplint --no-cache --ansi src'

            - run:
                name: 'Run static analysis'
                command: 'vendor/bin/phpcs -n --colors || true'

    build_frontend:
        <<: *defaults
        docker: [ { image: 'halplatform/hal-build-environments:node8.6-centos7' } ]

        steps:
            - attach_workspace: { at: '.' }

            - run:
                name: 'Prepare Enterprise Setup'
                command: 'curl -sLk https://git/pages/circleci/prepare-environment/prepare.sh | bash -'

            - restore_cache:
                keys: [ 'v1-frontend-deps-{{ checksum "yarn.lock" }}', 'v1-frontend-deps-' ]

            - run:
                name: 'Install node dependencies'
                command: 'yarn install'

            - run:
                name: 'Run eslint and sasslint'
                command: 'yarn run lint:sass && yarn run lint:js'

            - run:
                name: 'Run frontend build'
                command: 'yarn build'

            - save_cache:
                key: 'v1-frontend-deps-{{ checksum "yarn.lock" }}'
                paths: [ './node_modules' ]
