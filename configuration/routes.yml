parameters:
    routes.regex.alphanum: '[A-Za-z0-9]+'
    routes.regex.digit: '[0-9]+'
    routes.regex.token: '[0-9a-zA-Z]{40,40}'
    routes.regex.githubname: '[A-Za-z0-9\.\-]+'

    routes.regex.buildId: '[A-Za-z0-9\_\-\.]+'
    routes.regex.pushId: %routes.regex.buildId%
    routes.regex.queue.refresh: '[A-Za-z0-9\+\-\.]+'

    routes.regex.hex: '[0-9a-fA-F]{32}'

    routes:
        login:
            method: ['GET', 'POST']
            route: '/login'
            stack: ['login.handler', 'login.page']

        dashboard:
            method: 'GET'
            route: '/'
            stack: ['login.bouncer', 'dashboard.page']

        logout:
            method: 'GET'
            route: '/logout'
            stack: ['logout.handler']

        denied:
            method: 'GET'
            route: '/denied'
            stack: ['denied.page']

        queue:
            method: 'GET'
            route: '/queue'
            stack: ['login.bouncer', 'queue.page']

        debug:
            method: 'GET'
            route:  '/debug'
            stack:  ['login.bouncer', 'debug.page']

        github.authorization:
            method: 'GET'
            route:  '/github-authorization'
            stack:  ['login.bouncer', 'github.authorization.page']

        github.authorization.remove:
            method: ['GET', 'POST']
            route:  '/settings/remove-github-authorization'
            stack:  ['login.bouncer', 'github.authorization.remove.page']

        ################################################################################################################
        # ADMIN ROUTES
        ################################################################################################################

        admin:
            method: 'GET'
            route: '/admin'
            stack: ['admin.bouncer', 'admin.dashboard.page']

        admin.super:
            method: 'GET'
            route: '/superadmin'
            stack: ['superadmin.bouncer', 'admin.super.page']

        admin.server.status:
            method: 'GET'
            route: '/admin/server-status'
            stack: ['admin.bouncer', 'admin.server.status.page']

        admin.server.status.handler:
            method: 'GET'
            route: '/admin/server-status/:id'
            stack: ['admin.bouncer', 'admin.server.status.handler']
            conditions: {id: %routes.regex.digit%}

        admin.queue.page1:
            method: 'GET'
            route: '/admin/queue-history'
            stack: ['admin.bouncer', 'admin.queue.page']

        admin.queue:
            method: 'GET'
            route: '/admin/queue-history/date/:date'
            stack: ['admin.bouncer', 'admin.queue.page']
            conditions: {date: '[0-9]{4}-[0-9]{2}-[0-9]{2}'}

        admin.audit.logs.page1:
            method: 'GET'
            route: '/admin/audit-logs'
            stack: ['admin.bouncer', 'admin.audit.logs.page']

        admin.audit.logs:
            method: 'GET'
            route: '/admin/audit-logs/page/:page'
            stack: ['admin.bouncer', 'admin.audit.logs.page']
            conditions: {page: %routes.regex.digit%}

        ################################################################################################################
        # SUPER ADMIN ROUTES
        ################################################################################################################

        admin.super.caches:
            method: ['GET', 'POST']
            route: '/superadmin/caches'
            stack: ['superadmin.bouncer', 'admin.caches.handler', 'admin.caches.page']

        admin.super.users:
            method: 'GET'
            route: '/superadmin/users'
            stack: ['superadmin.bouncer', 'admin.users.page']

        admin.super.message:
            method: ['GET', 'POST']
            route: '/superadmin/message'
            stack: ['superadmin.bouncer', 'admin.message.page']

        admin.super.dangerzone:
            method: ['GET', 'POST']
            route: '/superadmin/dangerzone'
            stack: ['superadmin.bouncer', 'admin.dangerzone.page']

        ################################################################################################################
        # HELP ROUTES
        ################################################################################################################

        help:
            method: 'GET'
            route: '/help'
            stack: ['help.page']

        help.deployment:
            method: 'GET'
            route: '/help/deployment'
            stack: ['help.deployment.page']

        help.hal:
            method: 'GET'
            route: '/help/hal'
            stack: ['help.hal.page']

        help.githubpermissions:
            method: 'GET'
            route: '/help/github-permissions'
            stack: ['help.githubpermissions.page']

        # help.api:
        #     method: 'GET'
        #     route: '/help/api'
        #     stack: ['help.api.page']

        ################################################################################################################
        # BUILD ROUTES
        ################################################################################################################

        build.history.page1:
            method: 'GET'
            route: '/repositories/:id/builds'
            stack: ['login.bouncer', 'builds.page']
            conditions: {id: %routes.regex.digit%}
        build.history:
            method: 'GET'
            route: '/repositories/:id/builds(/page/:page)'
            stack: ['login.bouncer', 'builds.page']
            conditions:
                id: %routes.regex.digit%
                page: %routes.regex.digit%

        build:
            method: 'GET'
            route: '/builds/:build'
            stack: ['login.bouncer', 'build.page']
            conditions: {build: %routes.regex.buildId%}

        build.start:
            method: ['GET', 'POST']
            route: '/repositories/:id/build'
            stack: ['login.bouncer', 'build.start.handler', 'build.start.page']
            conditions: {id: %routes.regex.digit%}

        ################################################################################################################
        # PUSH ROUTES
        ################################################################################################################

        push:
            method: 'GET'
            route: '/pushes/:push'
            stack: ['login.bouncer', 'push.page']
            conditions: {push: %routes.regex.pushId%}

        push.start:
            method: ['GET', 'POST']
            route: '/builds/:build/push'
            stack: ['login.bouncer', 'push.start.handler', 'push.start.page']
            conditions: {build: %routes.regex.buildId%}

        push.history.page1:
            method: 'GET'
            route: '/repositories/:id/pushes'
            stack: ['login.bouncer', 'pushes.page']
            conditions: {id: %routes.regex.digit%}
        push.history:
            method: 'GET'
            route: '/repositories/:id/pushes(/page/:page)'
            stack: ['login.bouncer', 'pushes.page']
            conditions:
                id: %routes.regex.digit%
                page: %routes.regex.digit%

        rollback.page1:
            method: 'GET'
            route: '/repositories/:id/deployments/:deployment/pushes'
            stack: ['login.bouncer', 'push.rollback.page']
            conditions:
                id: %routes.regex.digit%
                deployment: %routes.regex.digit%

        rollback:
            method: 'GET'
            route: '/repositories/:id/deployments/:deployment/pushes(/page/:page)'
            stack: ['login.bouncer', 'push.rollback.page']
            conditions:
                id: %routes.regex.digit%
                deployment: %routes.regex.digit%

        ################################################################################################################
        # SERVER ROUTES
        ################################################################################################################

        servers:
            method: 'GET'
            route: '/servers'
            stack: ['login.bouncer', 'servers.page']

        server:
            method: 'GET'
            route: '/servers/:id'
            stack: ['login.bouncer', 'server.page']
            conditions: {id: %routes.regex.digit%}

        server.admin.add:
            method: ['GET', 'POST']
            route: '/servers/add'
            stack: ['admin.bouncer', 'server.admin.add.page']

        server.admin.edit:
            method: ['GET', 'POST']
            route: '/servers/:id/edit'
            stack: ['admin.bouncer', 'server.admin.edit.page']
            conditions: {id: %routes.regex.digit%}

        server.admin.remove.confirm:
            method: 'GET'
            route: '/servers/:id/remove'
            stack: ['admin.bouncer', 'delete.confirm.page']
            conditions: {id: %routes.regex.digit%}
        server.admin.remove:
            method: 'POST'
            route: '/servers/:id/remove'
            stack: ['admin.bouncer', 'server.admin.remove.handler']
            conditions: {id: %routes.regex.digit%}

        ################################################################################################################
        # USER ROUTES
        ################################################################################################################

        user:
            method: 'GET'
            route: '/users/:id'
            stack: ['login.bouncer', 'user.page']
            conditions: {id: %routes.regex.digit%}

        settings:
            method: 'GET'
            route: '/settings'
            stack: ['login.bouncer', 'user.settings.page']

        settings.handler:
            method: 'POST'
            route: '/users/:id/preferences'
            stack: ['login.bouncer', 'user.settings.handler']
            conditions: {id: %routes.regex.digit%}

        users:
            method: 'GET'
            route: '/users'
            stack: ['login.bouncer', 'users.page']

        ################################################################################################################
        # USER TOKEN MANAGEMENT ROUTES
        ################################################################################################################

        user.token.add:
            method: 'POST'
            route: '/users/:id/tokens'
            stack: ['login.bouncer', 'user.token.add.handler']
            conditions: {id: %routes.regex.digit%}

        user.token.remove.confirm:
            method: 'GET'
            route: '/users/:id/tokens/:token/revoke'
            stack: ['login.bouncer', 'delete.confirm.page']
            conditions:
                id: %routes.regex.digit%
                token: %routes.regex.token%
        user.token.remove:
            method: 'POST'
            route: '/users/:id/tokens/:token/revoke'
            stack: ['login.bouncer', 'user.token.remove.handler']
            conditions:
                id: %routes.regex.digit%
                token: %routes.regex.token%

        ################################################################################################################
        # REPOSITORY ROUTES
        ################################################################################################################

        repositories:
            method: 'GET'
            route: '/repositories'
            stack: ['login.bouncer', 'repositories.page']

        repository:
            method: 'GET'
            route: '/repositories/:id'
            stack: ['login.bouncer', 'repository.page']
            conditions: {id: %routes.regex.digit%}

        repository.status:
            method: 'GET'
            route: '/repositories/:id/status'
            stack: ['login.bouncer', 'repository.status.sticky.handler', 'repository.status.page']
            conditions: {id: %routes.regex.digit%}

        repository.admin.add:
            method: ['GET', 'POST']
            route: '/repositories/add'
            stack: ['login.bouncer', 'repository.admin.add.page']

        repository.admin.edit:
            method: ['GET', 'POST']
            route: '/repositories/:repository/edit'
            stack: ['repoadmin.bouncer', 'repository.admin.edit.page']
            conditions: {repository: %routes.regex.digit%}

        repository.admin.remove.confirm:
            method: 'GET'
            route: '/repositories/:id/remove'
            stack: ['admin.bouncer', 'delete.confirm.page']
            conditions: {id: %routes.regex.digit%}
        repository.admin.remove:
            method: 'POST'
            route: '/repositories/:id/remove'
            stack: ['admin.bouncer', 'repository.admin.remove.handler']
            conditions: {id: %routes.regex.digit%}

        ################################################################################################################
        # REPOSITORY DEPLOYMENT ROUTES
        ################################################################################################################

        repository.deployment:
            method: 'GET'
            route: '/repositories/:repository/deployments/:id'
            stack: ['login.bouncer', 'repository.deployment.page']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.digit%

        repository.deployments:
            method: 'GET'
            route: '/repositories/:repository/deployments'
            stack: ['login.bouncer', 'repository.deployments.page']
            conditions: {repository: %routes.regex.digit%}

        repository.deployments.add:
            method: ['GET', 'POST']
            route: '/repositories/:repository/deployments/add'
            stack: ['repoadmin.bouncer', 'repository.deployments.add.handler', 'repository.deployments.add.page']
            conditions: {repository: %routes.regex.digit%}

        repository.deployment.edit:
            method: ['GET', 'POST']
            route: '/repositories/:repository/deployments/:id/edit'
            stack: ['repoadmin.bouncer', 'repository.deployment.edit.handler', 'repository.deployment.edit.page']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.digit%

        repository.deployment.remove.confirm:
            method: 'GET'
            route: '/repositories/:repository/deployments/:id/remove'
            stack: ['repoadmin.bouncer', 'delete.confirm.page']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.digit%

        repository.deployment.remove:
            method: 'POST'
            route: '/repositories/:repository/deployments/:id/remove'
            stack: ['repoadmin.bouncer', 'repository.deployments.remove.handler']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.digit%

        ################################################################################################################
        # REPOSITORY ENCRYPTED PROPERTIES ROUTES
        ################################################################################################################

        repository.encrypted:
            method: 'GET'
            route: '/repositories/:repository/encrypted-properties'
            stack: ['login.bouncer', 'repository.encrypted.page']
            conditions: {repository: %routes.regex.digit%}

        repository.encrypted.add:
            method: ['GET', 'POST']
            route: '/repositories/:repository/encrypted-properties/add'
            stack: ['repoadmin.bouncer', 'repository.encrypted.add.handler', 'repository.encrypted.add.page']
            conditions: {repository: %routes.regex.digit%}

        repository.encrypted.remove.confirm:
            method: 'GET'
            route: '/repositories/:repository/encrypted-properties/:id/remove'
            stack: ['repoadmin.bouncer', 'delete.confirm.page']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.alphanum%
        repository.encrypted.remove:
            method: ['POST']
            route: '/repositories/:repository/encrypted-properties/:id/remove'
            stack: ['repoadmin.bouncer', 'repository.encrypted.remove.handler']
            conditions:
                repository: %routes.regex.digit%
                id: %routes.regex.alphanum%

        ################################################################################################################
        # GROUP ROUTES
        ################################################################################################################

        groups:
            method: 'GET'
            route: '/groups'
            stack: ['login.bouncer', 'repositories.page']

        group:
            method: 'GET'
            route: '/groups/:id'
            stack: ['login.bouncer', 'group.page']
            conditions: {id: %routes.regex.digit%}

        group.admin.add:
            method: ['GET', 'POST']
            route: '/groups/add'
            stack: ['login.bouncer', 'group.admin.add.page']

        group.admin.edit:
            method: ['GET', 'POST']
            route: '/groups/:id/edit'
            stack: ['admin.bouncer', 'group.admin.edit.page']
            conditions: {id: %routes.regex.digit%}

        group.admin.remove.confirm:
            method: 'GET'
            route: '/groups/:id/remove'
            stack: ['admin.bouncer', 'delete.confirm.page']
            conditions: {id: %routes.regex.digit%}
        group.admin.remove:
            method: 'POST'
            route: '/groups/:id/remove'
            stack: ['admin.bouncer', 'group.admin.remove.handler']
            conditions: {id: %routes.regex.digit%}

        ################################################################################################################
        # ENVIRONMENT ROUTES
        ################################################################################################################

        environments:
            method: 'GET'
            route: '/environments'
            stack: ['login.bouncer', 'environments.page']
            conditions: {id: %routes.regex.digit%}

        environment:
            method: 'GET'
            route: '/environments/:id'
            stack: ['login.bouncer', 'environment.page']
            conditions: {id: %routes.regex.digit%}

        environment.admin.reorder:
            method: ['GET', 'POST']
            route: '/environments/reorder'
            stack: ['admin.bouncer', 'environment.admin.reorder.handler', 'environment.admin.reorder.page']

        environment.admin.add:
            method: ['GET', 'POST']
            route: '/environments/add'
            stack: ['admin.bouncer', 'environment.admin.add.page']

        environment.admin.remove.confirm:
            method: 'GET'
            route: '/environments/:id/delete'
            stack: ['admin.bouncer', 'delete.confirm.page']
            conditions: {id: %routes.regex.digit%}
        environment.admin.remove:
            method: 'POST'
            route: '/environments/:id/delete'
            stack: ['admin.bouncer', 'environment.admin.remove.handler']
            conditions: {id: %routes.regex.digit%}

        environment.admin.edit:
            method: ['GET', 'POST']
            route: '/environments/:id/edit'
            stack: ['admin.bouncer', 'environment.admin.edit.page']
            conditions: {id: %routes.regex.digit%}


        ################################################################################################################
        # KRAKEN ROUTES
        ################################################################################################################

        kraken:
            route: '/kraken'
            stack: ['kraken.page']

        kraken.applications:
            route: '/kraken/applications'
            stack: ['kraken.applications.page']

        kraken.environments:
            route: '/kraken/environments'
            stack: ['kraken.environments.page']

        kraken.application:
            route: '/kraken/applications/:application'
            stack: ['kraken.middleware.require.entity', 'kraken.application.page']
            conditions: {application: %routes.regex.hex%}
        kraken.status:
            route: '/kraken/applications/:application/status'
            stack: ['kraken.middleware.require.entity', 'kraken.status.page']
            conditions: {application: %routes.regex.hex%}

        kraken.property:
            route: '/kraken/applications/:application/properties/:property'
            stack: ['kraken.middleware.require.entity', 'kraken.application.property.page']
            conditions:
                application: %routes.regex.hex%
                property: %routes.regex.hex%

        kraken.configuration:
            route: '/kraken/applications/:application/configurations/:configuration'
            stack: ['kraken.middleware.require.entity', 'kraken.application.configuration.page']
            conditions:
                application: %routes.regex.hex%
                configuration: %routes.regex.hex%

        kraken.configuration.compare:
            route: '/kraken/applications/:application/configurations/:configuration/compare'
            stack: ['kraken.middleware.require.entity', 'kraken.application.configuration.page']
            conditions:
                application: %routes.regex.hex%
                configuration: %routes.regex.hex%

        # add application
        kraken.add_application:
            route: '/kraken/applications/add'
            stack: ['kraken.add_application.page']

        # add schema
        kraken.application.schema:
            route: '/kraken/applications/:application/schema'
            stack: ['kraken.middleware.require.entity', 'kraken.application.schema.page']
            conditions: {application: %routes.regex.hex%}

        # view configuration, add property
        kraken.application.target:
            route: '/kraken/applications/:application/environments/:environment'
            stack: ['kraken.middleware.require.entity', 'kraken.application.target.page']
            conditions:
                application: %routes.regex.hex%
                environment: %routes.regex.hex%

        # add environment to application
        kraken.application.add_target:
            route: '/kraken/applications/:application/environments'
            stack: ['kraken.middleware.require.entity', 'kraken.application.add_target.page']
            conditions: {application: %routes.regex.hex%}

        # deploy configuration to target
        kraken.deploy:
            method: ['GET']
            route: '/kraken/targets/:target/deploy'
            stack: ['kraken.middleware.require.entity', 'kraken.deploy.page']
            conditions: {target: %routes.regex.hex%}
        kraken.deploy.handler:
            method: ['POST']
            route: '/kraken/targets/:target/deploy'
            stack: ['kraken.middleware.require.entity', 'kraken.deploy.handler']
            conditions: {target: %routes.regex.hex%}

        ################################################################################################################
        # GITHUB API ROUTES
        ################################################################################################################

        api.github.user.repositories:
            method: 'GET'
            route: '/api/github/users/:username/repositories'
            stack: ['login.bouncer', 'api.github.user.repositories']
            conditions: {username: %routes.regex.githubname%}

        ################################################################################################################
        # PUBLIC API ROUTES
        ################################################################################################################

        api.index:
            method: 'GET'
            route: '/api'
            stack: ['cachedApi.middleware', 'api.index']

        api.environments:
            method: 'GET'
            route: '/api/environments'
            stack: ['cachedApi.middleware', 'api.environments']

        api.environment:
            method: 'GET'
            route: '/api/environments/:id'
            stack: ['cachedApi.middleware', 'api.environment']
            conditions: {id: %routes.regex.digit%}

        api.servers:
            method: 'GET'
            route: '/api/servers'
            stack: ['cachedApi.middleware', 'api.servers']

        api.server:
            method: 'GET'
            route: '/api/servers/:id'
            stack: ['cachedApi.middleware', 'api.server']
            conditions: {id: %routes.regex.digit%}

        api.groups:
            method: 'GET'
            route: '/api/groups'
            stack: ['cachedApi.middleware', 'api.groups']

        api.group:
            method: 'GET'
            route: '/api/groups/:id'
            stack: ['cachedApi.middleware', 'api.group']
            conditions: {id: %routes.regex.digit%}

        api.users:
            method: 'GET'
            route: '/api/users'
            stack: ['cachedApi.middleware', 'api.users']

        api.user:
            method: 'GET'
            route: '/api/users/:id'
            stack: ['cachedApi.middleware', 'api.user']
            conditions: {id: %routes.regex.digit%}

        api.deployment:
            method: 'GET'
            route: '/api/deployment/:id'
            stack: ['cachedApi.middleware', 'api.deployment']
            conditions: {id: %routes.regex.digit%}

        # @todo change this url because it is terrible
        api.deployment.lastpush:
            method: 'GET'
            route: '/api/deployment/:id/last-push'
            stack: ['cachedApi.middleware', 'api.deployment.lastpush']
            conditions: {id: %routes.regex.digit%}

        api.build:
            method: 'GET'
            route: '/api/builds/:id'
            stack: ['cachedApi.middleware', 'api.build']
            conditions: {id: %routes.regex.buildId%}

        api.build.logs:
            method: 'GET'
            route: '/api/builds/:id/logs'
            stack: ['cachedApi.middleware', 'api.build.logs']
            conditions: {id: %routes.regex.buildId%}

        api.push:
            method: 'GET'
            route: '/api/pushes/:id'
            stack: ['cachedApi.middleware', 'api.push']
            conditions: {id: %routes.regex.pushId%}

        api.push.logs:
            method: 'GET'
            route: '/api/pushes/:id/logs'
            stack: ['cachedApi.middleware', 'api.push.logs']
            conditions: {id: %routes.regex.pushId%}

        api.event.log:
            method: 'GET'
            route: '/api/eventlogs/:id'
            stack: ['cachedApi.middleware', 'api.event.log']
            conditions: {id: %routes.regex.alphanum%}

        api.repositories:
            method: 'GET'
            route: '/api/repositories'
            stack: ['cachedApi.middleware', 'api.repositories']

        api.repository:
            method: 'GET'
            route: '/api/repositories/:id'
            stack: ['cachedApi.middleware', 'api.repository']
            conditions: {id: %routes.regex.digit%}

        api.deployments:
            method: 'GET'
            route: '/api/repositories/:id/deployments'
            stack: ['cachedApi.middleware', 'api.deployments']
            conditions: {id: %routes.regex.digit%}

        api.builds:
            method: 'GET'
            route: '/api/repositories/:id/builds'
            stack: ['cachedApi.middleware', 'api.builds']
            conditions: {id: %routes.regex.digit%}

        api.pushes:
            method: 'GET'
            route: '/api/repositories/:id/pushes'
            stack: ['cachedApi.middleware', 'api.pushes']
            conditions: {id: %routes.regex.digit%}

        api.queue:
            method: 'GET'
            route: '/api/queue'
            stack: ['cachedApi.middleware', 'api.queue']

        api.queue.refresh:
            method: 'GET'
            route: '/api/queue-refresh/:jobs'
            stack: ['cachedApi.middleware', 'api.queue.refresh']
            conditions: {jobs: %routes.regex.queue.refresh%}
