#!/usr/bin/env bash

dir=$( cd "$( dirname "$0" )" && pwd )

slate_port=4567
slate_container="halslate"
slate_image="slate"

CONTAINER_RUNNING=$(docker inspect -f "{{ .State.Running }}" ${slate_container} 2>/dev/null)

# container not found -> build, start and build
if [ ! "$?" = "0" ] ; then

    HAS_IMAGE=$(docker images -q "${slate_image}")

    if [ "${HAS_IMAGE}" = "" ] ; then
        echo
        echo "Image ${slate_image} does not exist. Creating..."
        docker build -t "${slate_image}" "${dir}/../slate"
    fi

    echo
    echo "Container ${slate_container} does not exist. Creating..."
    docker run -d \
    -p ${slate_port}:${slate_port} \
    --name "${slate_container}" \
    -v "${dir}"/../slate:/app/source \
    slate \
    --force-polling

    docker exec "${slate_container}" rake build
    docker cp "${slate_container}":/app/build/. "${dir}/../public/docs/api"

# container not running -> start and build
elif [ ! "${CONTAINER_RUNNING}" = "true" ] ; then
    echo
    echo "Container ${slate_container} exists, but not running. Starting..."
    docker start "${slate_container}"

    docker exec "${slate_container}" rake build
    docker cp "${slate_container}":/app/build/. "${dir}/../public/docs/api"

# container running -> restart and build
else
    echo
    echo "Container ${slate_container} already running. Restarting..."
    docker restart "${slate_container}"

    docker exec "${slate_container}" rake build
    docker cp "${slate_container}":/app/build/. "${dir}/../public/docs/api"
fi
