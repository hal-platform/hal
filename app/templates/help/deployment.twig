{% extends 'base.html.twig' %}
{% import "partials/macros.twig" as macros %}

{% set page_title = 'Deployment Help' %}

{% block content %}
    <h2>Deployment scripting guide for engineers</h2>

    <p><a class="btn--small btn--back" href="{{ urlFor('help') }}">Back to Help</a></p>

    <ul>
        <li><a href="#shell-commands">Commands</a></li>
        <li><a href="#configuration-file">.hal9000.yml configuration file</a></li>
        <li><a href="#build-environment">Build scripting environment</a></li>
        <li><a href="#push-environment">Push scripting environment</a></li>
        <li><a href="#package-managers">Supported package managers</a></li>
    </ul>

    <h2 id="shell-commands">Commands</h2>
    <p>An application can specify a command to run in each of these separate steps in the deployment process:</p>
    <ul>
        <li><strong>Build</strong> (Runs on build server)</li>
        <li><strong>Pre-push Build Transform</strong> (Runs on build server)</li>
        <li><strong>Pre-push</strong> (Runs on deployment web server)</li>
        <li><strong>Post-push</strong> (Runs on deployment web server)</li>
    </ul>

    <p>
        These commands must be executable in a standard <strong>SSH shell environment</strong>.
        It is common for applications to create a special bin within the project folder, but any command will do.<br><br>
        Commands designed to run on the target server (pre-push or post-push) are skipped for EC2 and Elastic Beanstalk deployments
    </p>

    Examples:
    <ul>
        <li><code>env</code></li>
        <li><code>npm install</code></li>
        <li><code>bin/composer install --no-dev</code></li>
        <li><code>bin/deploy</code></li>
        <li><code>cmd /c build.cmd</code></li>
        <li><code>bin/compile_my_application --environment $HAL_ENVIRONMENT</code></li>
    </ul>

    <p>
        All commands are executed from the directory of the application.
    </p>
    <p>
       Build command are executed from a semi-isolated environment on the build server. Push commands are executed on the server the application code is being pushed to.
       HAL 9000 will consider any command with a non-zero exit code as a failure.
    </p>

    {{ macros.alert('warning', 'The exit code of the command <strong>MUST</strong> be 0.') }}

    <h2 id="configuration-file">HAL 9000 configuration file</h2>
    <p>
        Several deployment options may be configured by committing a <code>.hal9000.yml</code> to the base directory of your project codebase.
    </p>

    {{ block('configuration_explanation') }}

    <h5>Here is an example with default values:</h5>
    {{ block('configuration_file') }}

    <p>
        For applications already using HAL, build and push commands in the database will be used for <strong>old builds</strong>, and when no configuration file has been committed.
        When present, commands found in the configuration file will be used instead of build and push commands stored in the HAL database.
    </p>

    <h2 id="build-environment">Build Scripting Environment</h2>
    <p>During the build process, The following environment variables are available to application build scripts:</p>
    {{ block('build_vars') }}

    <p>
        These variables will be available as standard environment variables in a shell scripting environment.
        If using a PHP-based script, they are available in the <strong>$_SERVER</strong> superglobal.
    </p>

    <h2 id="push-environment">Push Scripting Environment</h2>
    <p>During the push process, The following environment variables are available to application pre-push and post-push scripts:</p>
    {{ block('push_vars') }}

    <p>Upon deployment a yaml file in the following format will be written to the application directory:</p>
    {{ block('push_file') }}

    <h5 class="mbn"><strong>A note on post-push command failures</strong></h5>
    <p>
        Post-push commands run <strong>after</strong> the application code is synced to the target server. For this
        reason, returning an error state will not stop the push process. If an error occurs, you will need to start
        a new push and overwrite the failed one.
    </p>

    <h2 id="package-managers">Supported package managers</h2>

    <p>The following package managers are supported:</p>
    <ul>
        <li>Composer (PHP)</li>
        <li>NPM (Node)</li>
        <li>Bundler (Ruby)</li>
        <li>Gem (Ruby)</li>
        <li>Nuget (Windows build system)</li>
    </ul>

    {{ macros.alert('info', 'NPM, Gem, and Nuget are installed globally.<strong> Composer and Bundler are not.</strong>', block('pm_details'), true) }}

    <p>
        Each project has its own dedicated <strong>$HOME</strong> directory, and caches and packages will be installed there.
        HAL 9000 automatically sets isolated installation and caching directories for these tools.
    </p>

    <h5 class="mbn"><strong>A note on rubygems and bundler</strong></h5>
    <p>
        Rubygems.org is one of the most unreliable package repositories. If you rely on ruby tools to deploy, consider packaging the ruby code and commiting
        to your codebase.
    </p>

    <p>Installing gems or npm dependencies outside of the <strong>$HOME</strong> directory is unsupported and may break without warning. <strong>DO NOT DO THIS</strong>.</p>

    {{ macros.alert('warning', 'Do not change the default <strong>$HOME</strong>, caching, or installation directories of your package managers.') }}

    <h4>Recommended installation commands</h4>
    {{ block('pm_commands') }}

{% endblock %}

{% block build_vars %}
    <table>
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <strong>master</strong>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <strong>test</strong>, <strong>beta</strong>, <strong>prod</strong>)</td>
            </tr>
            <tr>
                <td>HAL_REPO</td>
                <td>Hal name for the deployed application</td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_vars %}
    <table>
        <thead>
            <tr>
                <td>Variable</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>HAL_BUILDID</td>
                <td>ID of the build</td>
            </tr>
            <tr>
                <td>HAL_COMMIT</td>
                <td>40 character commit SHA</td>
            </tr>
            <tr>
                <td>HAL_GITREF</td>
                <td>Git reference (such as <strong>master</strong>)</td>
            </tr>
            <tr>
                <td>HAL_ENVIRONMENT</td>
                <td>Environment (such as <strong>test</strong>, <strong>beta</strong>, <strong>prod</strong>)</td>
            </tr>
            <tr>
                <td>HAL_REPO</td>
                <td>Hal name for the deployed application</td>
            </tr>
            <tr>
                <td>HAL_HOSTNAME</td>
                <td>Hostname of server</td>
            </tr>
            <tr>
                <td>HAL_PATH</td>
                <td>Full path of deployment directory on server</td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block push_file %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.push.yml

id: ''         # Build ID
source: ''     # Full url of github repository
env: ''        # Environment of the build
user: ''       # Username of user that triggered the push
reference: ''  # Git Reference
commit: ''     # Git commit SHA
date: ''       # ISO 8601 date
</pre>
{% endblock %}

{% block configuration_explanation %}
    <table>
        <thead>
            <tr>
                <td>Property</td>
                <td>Description</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>system</td>
                <td>Build system. <strong>unix</strong> or <strong>windows</strong>. In the future, Docker containers may be specified.</td>
            </tr>
            <tr>
                <td>dist</td>
                <td>Relative path to directory to archive. This path must exist and be within the project directory. If a <strong>dist</strong> or compiled binary is built as part of your build process, you can make sure to only archive compiled and deployable files.</td>
            </tr>
            <tr>
                <td>exclude</td>
                <td>Directories or files to exclude while pushing deployment to target server. If you have caches or assets that must not be removed by HAL, enter them here.</td>
            </tr>
            <tr>
                <td>build</td>
                <td>A command or list of commands used to build a project. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>build_transform</td>
                <td>A command or list of commands used to transform a build per-server or per-environment during the push process. Up to 10 may be entered.</td>
            </tr>
            <tr>
                <td>pre_push</td>
                <td>A command or list of commands used to prepare target server for push. Up to 10 may be entered.<strong>Skipped for EC2 and EB deployments.</strong></td>
            </tr>
            <tr>
                <td>post_push</td>
                <td>A command or list of commands used to clean up target server after push. Up to 10 may be entered.<strong>Skipped for EC2 and EB deployments.</strong></td>
            </tr>
        </tbody>
    </table>
{% endblock %}

{% block configuration_file %}
    <pre>
# filename: APPLICATION_ROOT/.hal9000.yml

system: unix                 # Build system.
dist: .                      # Relative file path to use for build archive.
exclude:                     # Array of directories or files to exclude while pushing to server
    - config/database.ini
    - data/

build: []                    # Shell commands to run during build process, on build server
build_transform: []          # Shell commands to run before push process, on build server
pre_push: []                 # Shell commands to run before push process, on target deployment server
post_push: []                # Shell commands to run after push process, on target deployment server
</pre>
{% endblock %}

{% block pm_details %}
<p>
    To use <strong>Composer</strong>, it must be committed and included in your codebase or downloaded manually.
    <a href="http://composer/">http://composer</a> provides an installer that can download and run Composer on-the-fly.<br><br>
</p>

<p>
    <strong>Bundler</strong> must be installed with gem before running <code>bundle install</code>.
</p>
{% endblock %}

{% block pm_commands %}
    <table>
        <thead>
            <tr>
                <td>Manager</td>
                <td>Command</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Composer</td>
                <td><code>composer install --no-dev --prefer-dist --ansi --no-interaction --optimize-autoloader</code></td>
            </tr>
            <tr>
                <td>NPM</td>
                <td><code>npm install --production</code></td>
            </tr>
            <tr>
                <td>Bundler</td>
                <td>
                    <code>
                        gem install bundler<br>
                        bundle install --frozen
                    </code>
                </td>
            </tr>
        </tbody>
    </table>
{% endblock %}
